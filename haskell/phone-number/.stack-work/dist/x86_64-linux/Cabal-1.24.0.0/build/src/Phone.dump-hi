
==================== FINAL INTERFACE ====================
2016-10-09 18:09:33.71427375 UTC

interface phone-number-0.0.0-75gpB5J084pGrWiAUAjrh7:Phone 8001
  interface hash: 06032e354ee2e75847969aa398f78870
  ABI hash: 7ff5e1dbd0be6392b8544b9c662c3169
  export-list hash: 68a8d5a045d57e7e4279d722395ad7b0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Phone.areaCode
  Phone.number
  Phone.prettyPrint
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
0f38e9f93d7e073c87b343e6467e067d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Phone.$trModule2 Phone.$trModule1) -}
0f0c2c747d45ae23630291c608d4c625
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Phone"#) -}
7144104bbc3f3efb71c9b1ee401689e6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "phone-number-0.0.0-75gpB5J084pGrWiAUAjrh7"#) -}
89af6425cc9cc8b59ccff926c843937d
  $w$j :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Char])[OneShot] ->
                 case w of wild {
                   []
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        Phone.prettyPrint1
                   : ipv ipv1
                   -> let {
                        ds2 :: ([GHC.Types.Char], [GHC.Types.Char])
                        = case GHC.List.splitAt_$s$wsplitAt'
                                 @ GHC.Types.Char
                                 ipv1
                                 2# of ww { (#,#) ww1 ww2 ->
                          (ww1, ww2) }
                      } in
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           ipv
                           (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                        (GHC.CString.unpackAppendCString#
                           "-"#
                           (case ds2 of wild2 { (,) xs' xs'' -> xs'' })) }) -}
e09d423003c43d3a61d76e9e96368f43
  areaCode :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case Phone.number s of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just n
                   -> GHC.Base.Just
                        @ [GHC.Types.Char]
                        (GHC.List.$wunsafeTake @ GHC.Types.Char 3# n) }) -}
21f6c8914542404dbb8ed4f2387b0577
  number :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 let {
                   n :: [GHC.Types.Char]
                   = GHC.List.filter @ GHC.Types.Char GHC.Unicode.isDigit s
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char n 0# of ww2 {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                   10# -> GHC.Base.Just @ [GHC.Types.Char] n
                   11#
                   -> case n of wild {
                        []
                        -> case GHC.List.badHead
                           ret_ty (GHC.Base.Maybe [GHC.Types.Char])
                           of {}
                        : x ds1
                        -> case x of ww { GHC.Types.C# ww1 ->
                           case Data.Char.$wdigitToInt ww1 of ww4 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                             1# -> GHC.Base.Just @ [GHC.Types.Char] ds1 } } } }) -}
d61f22a36ece6b3643c5d3ae5810eb4e
  prettyPrint :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Phone.number s of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just n
                   -> GHC.Base.Just
                        @ [GHC.Types.Char]
                        (GHC.CString.unpackAppendCString#
                           "("#
                           (let {
                              n1 :: [GHC.Types.Char]
                              = GHC.CString.unpackAppendCString#
                                  ")"#
                                  (GHC.CString.unpackAppendCString#
                                     " "#
                                     (case n of wild1 {
                                        [] -> Phone.prettyPrint2
                                        : ipv ipv1
                                        -> case GHC.List.splitAt_$s$wsplitAt'
                                                  @ GHC.Types.Char
                                                  ipv1
                                                  2# of ww { (#,#) ww1 ww2 ->
                                           Phone.$w$j ww2 } }))
                            } in
                            letrec {
                              $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> [GHC.Types.Char]
                                {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                              = \ (w :: [GHC.Types.Char]) (ww :: GHC.Prim.Int#) ->
                                case w of wild1 {
                                  [] -> n1
                                  : y ys
                                  -> case ww of ds1 {
                                       DEFAULT
                                       -> GHC.Types.:
                                            @ GHC.Types.Char
                                            y
                                            ($wgo ys (GHC.Prim.-# ds1 1#))
                                       1# -> GHC.Types.: @ GHC.Types.Char y n1 } }
                            } in
                            $wgo n 3#)) }) -}
a4f2e70975f4f260ff69d391f4278ac6
  prettyPrint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-"#
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b3ce4f8f4c7eff11f663504602998384
  prettyPrint2 :: [GHC.Types.Char]
  {- Unfolding: (Phone.$w$j (GHC.Types.[] @ GHC.Types.Char)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

