
==================== FINAL INTERFACE ====================
2016-12-01 17:19:59.855955597 UTC

interface scrabble-score-0.0.0-HIvY5XzNISh8W2PQcTDAzu:Scrabble 8001
  interface hash: caee261737b0f89ca0736c3f44ccae18
  ABI hash: 040d271bfe1b09babd59d1cf96f69fd8
  export-list hash: c231bcbd097294b20682ec177e9d3b5f
  orphan hash: 0a73129597017efc1d4a5581ffac9942
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Scrabble.scoreLetter
  Scrabble.scoreWord
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
457c4fc288584cad51994a4d9da8bf26
  $sfromList ::
    [(GHC.Types.Int, a)] -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Int, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Int
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> Scrabble.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2
                             GHC.Types.True
                             -> Scrabble.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2 } } } } } } }) -}
7a30e3220c7310d521b3a92892bb74e0
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Int a1
    -> [(GHC.Types.Int, a1)] -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
91fcefc24d3373508b4bc97170f8e903
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Scrabble.$trModule2
                   Scrabble.$trModule1) -}
b61044640f75d2c1899352abd81cdbf2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Scrabble"#) -}
82ce4ff0163f18ddd90224796a41c947
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "scrabble-score-0.0.0-HIvY5XzNISh8W2PQcTDAzu"#) -}
190b6fa25c70d63b35375804550f9fb3
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
cfaeed8c1b37711db4cc6761ca245467
  $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
e403def610132e38b28f9cd0499a080f
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
f6166064caa32f65fba92c67da73d03c
  scoreLetter :: GHC.Types.Char -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: GHC.Types.Char) ->
                 let {
                   c :: GHC.Types.Char
                   = case x of ww { GHC.Types.C# ww1 ->
                     case {__pkg_ccall base-4.9.0.0 u_towlower GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                            (GHC.Prim.ord# ww1)
                            GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.leWord# (GHC.Prim.int2Word# ds1) 1114111##) of wild1 {
                       GHC.Types.False -> GHC.Char.chr2 ds1
                       GHC.Types.True -> GHC.Types.C# (GHC.Prim.chr# ds1) } } }
                 } in
                 letrec {
                   go10 :: GHC.Types.Int
                           -> Data.Map.Base.Map GHC.Types.Int [GHC.Types.Char]
                           -> GHC.Types.Int
                     {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
                   = \ (z' :: GHC.Types.Int)
                       (ds :: Data.Map.Base.Map GHC.Types.Int [GHC.Types.Char]) ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x1 l r
                       -> go10
                            (case GHC.List.elem
                                    @ GHC.Types.Char
                                    GHC.Classes.$fEqChar
                                    c
                                    x1 of wild1 {
                               GHC.Types.False -> go10 z' r GHC.Types.True -> kx })
                            l
                       Data.Map.Base.Tip -> z' }
                 } in
                 go10 Scrabble.scoreLetter29 Scrabble.scores) -}
988a55f045aedf23e109ae9d478024a0
  scoreLetter1 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter26
                   Scrabble.scoreLetter2) -}
94a1d0079848b6e4a4157f68132e3b92
  scoreLetter10 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10#) -}
a82caa6bdabe779bc5e01c6ede5b84cc
  scoreLetter11 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter13, Scrabble.scoreLetter12)) -}
0930f3db8268961758361ba59b8da662
  scoreLetter12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "jx"#) -}
b0cab99b9193a3690c18fc2f89977b95
  scoreLetter13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8#) -}
366a045ce033341955c762526fc25e59
  scoreLetter14 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter16, Scrabble.scoreLetter15)) -}
492a700ad36fae18e1f9127b3d712f03
  scoreLetter15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "k"#) -}
31aa0cd9c9a6bc0c4b8f1016cbdbd61b
  scoreLetter16 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
3acd29819390d9b9552e8c1b7c2c3ed5
  scoreLetter17 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter19, Scrabble.scoreLetter18)) -}
5cfa22621cdc1aeed6f25b5eb37e0702
  scoreLetter18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "fhvwy"#) -}
56567abbbd66d5f252949568fefbaad4
  scoreLetter19 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
e030edc9e08631409ee1f8341ec87912
  scoreLetter2 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter23
                   Scrabble.scoreLetter3) -}
3c4c46c79a7531673c42dbfa61e9580f
  scoreLetter20 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter22, Scrabble.scoreLetter21)) -}
d8f58ca75a3be8e0dd897f899781036e
  scoreLetter21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bcmp"#) -}
aaa434fdb503d37c8fb914fbe6220f8f
  scoreLetter22 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
0c2012d0dd93a559dbd21da47dffcc4d
  scoreLetter23 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter25, Scrabble.scoreLetter24)) -}
09c62a167acca437ccf575c2dc40a0fa
  scoreLetter24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "dg"#) -}
482454c36027274f377025952f4e540e
  scoreLetter25 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
9f9688c53d78031aabf0138bd6206aa4
  scoreLetter26 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter28, Scrabble.scoreLetter27)) -}
5908f2dfa07699e5a209a48c26c40e29
  scoreLetter27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "aeioulnrst"#) -}
58fb25423dc2bc7fa5678010bcc2e83b
  scoreLetter28 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
bf0c9098d703711a8761c94addb02854
  scoreLetter29 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4e5e8f31b26570e22790a9c1afe153a3
  scoreLetter3 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter20
                   Scrabble.scoreLetter4) -}
f88975f12898d6982576babcba51d5cb
  scoreLetter4 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter17
                   Scrabble.scoreLetter5) -}
956d3b2f438f3cd9e0a0e1d981c5be00
  scoreLetter5 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter14
                   Scrabble.scoreLetter6) -}
b1901cdc1824994434ca4ff5ec754be8
  scoreLetter6 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter11
                   Scrabble.scoreLetter7) -}
b47fe2153d015627db125946c4562c5f
  scoreLetter7 :: [(GHC.Types.Int, [GHC.Types.Char])]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, [GHC.Types.Char])
                   Scrabble.scoreLetter8
                   (GHC.Types.[] @ (GHC.Types.Int, [GHC.Types.Char]))) -}
e09161f6f0f8c7539567628c438f4977
  scoreLetter8 :: (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: ((Scrabble.scoreLetter10, Scrabble.scoreLetter9)) -}
4be89b933550c1245f7a6848e5cab151
  scoreLetter9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "qz"#) -}
c27690835b60404318c5c2c3dd347ed1
  scoreWord :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Scrabble.$wgo w 0# of ww { DEFAULT -> GHC.Types.I# ww }) -}
bdcbe893844dd6d2e746c66317828e8b
  scores :: Data.Map.Base.Map GHC.Types.Int [GHC.Types.Char]
  {- Unfolding: (Scrabble.$sfromList
                   @ [GHC.Types.Char]
                   Scrabble.scoreLetter1) -}
"SPEC/Scrabble fromList @ Int _" [ALWAYS] forall @ a
                                                 ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = Scrabble.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

