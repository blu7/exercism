
==================== FINAL INTERFACE ====================
2016-12-01 20:12:52.478920593 UTC

interface secret-handshake-0.0.0-CjPa9aMM3781OzZTTB55PX:SecretHandshake 8001
  interface hash: ae9abe3caab564f7fdff82682c76fca5
  ABI hash: e7650aedaac69b281b309c0153ee2fbb
  export-list hash: 64ffedd2990d2807876dddbe17a16515
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: dbe274d9e98f049c29ea66d4876dcf97
  sig of: Nothing
  used TH splices: False
  where
exports:
  SecretHandshake.SecretHandshake|{SecretHandshake.handshake}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Numeric 08bd52d7260627400faafb09e6574b07
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
94a9931d6dc3b91edf586d8e45480d4c
  $fSecretHandshakeInt ::
    SecretHandshake.SecretHandshake GHC.Types.Int
  DFunId
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SecretHandshake.$fSecretHandshakeInt_$chandshake
                  `cast`
                (Sym (SecretHandshake.N:SecretHandshake[0] <GHC.Types.Int>_N)) -}
74c06beec4ba41f0f48643b5efef8e50
  $fSecretHandshakeInt1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.$fSecretHandshakeInt6
                   SecretHandshake.$fSecretHandshakeInt2) -}
ae06b994e116e9aa0d89f13cc3b46901
  $fSecretHandshakeInt2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.$fSecretHandshakeInt5
                   SecretHandshake.$fSecretHandshakeInt3) -}
9d1474671ed09b46331293e842649333
  $fSecretHandshakeInt3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.$fSecretHandshakeInt4
                   (GHC.Types.[] @ GHC.Base.String)) -}
d1bd783b84dd36df2cb4770f721d52ac
  $fSecretHandshakeInt4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "jump"#) -}
4ba2feebab9257fba8a8c883a6d57948
  $fSecretHandshakeInt5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "close your eyes"#) -}
3926f1c54fa1101a2aaea888548c0d80
  $fSecretHandshakeInt6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "double blink"#) -}
3bd8d27d41b7d920b18a784abe97bedd
  $fSecretHandshakeInt7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wink"#) -}
346f5fe1b2ec5e441d4040fa8788b3df
  $fSecretHandshakeInt_$chandshake ::
    GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 SecretHandshake.handshakeStr (SecretHandshake.intToBase2 x)) -}
11ec9401dd92e4e3d719669b034df281
  $fSecretHandshakeInt_go ::
    [GHC.Types.Bool] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
94a9931d6dc3b91edf586d8e45480d4c
  $fSecretHandshake[] ::
    SecretHandshake.SecretHandshake GHC.Base.String
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SecretHandshake.handshakeStr
                  `cast`
                (Sym (SecretHandshake.N:SecretHandshake[0] <GHC.Base.String>_N)) -}
6274cec258e81fca79cd33c2af8cb21d
  $tc'C:SecretHandshake :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15129511700233403271##
                   16800893843507070241##
                   SecretHandshake.$trModule
                   SecretHandshake.$tc'C:SecretHandshake1) -}
adaada37e2c3287c2a66ef095440b5d3
  $tc'C:SecretHandshake1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SecretHandshake"#) -}
eccc01a450266c533a11a3a57648b7e2
  $tcSecretHandshake :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14539640715540970171##
                   13975559102691203234##
                   SecretHandshake.$trModule
                   SecretHandshake.$trModule1) -}
3c0e63bc977386490c34815f6f7dc66d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SecretHandshake.$trModule2
                   SecretHandshake.$trModule1) -}
3c8b32e969bc2b0da0279c8541101102
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SecretHandshake"#) -}
f34ec1453411aa2fb932fa987b6215cd
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "secret-handshake-0.0.0-CjPa9aMM3781OzZTTB55PX"#) -}
1ea4c41a620cb61971b91f4c0c1979ef
  $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
3426b5bd06ee9329d1c347011b03eae5
  $wintToBase2 :: GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
94a9931d6dc3b91edf586d8e45480d4c
  class SecretHandshake a where
    handshake :: a -> [GHC.Base.String]
    {-# MINIMAL handshake #-}
6ba685bd078ad51bf79e188c0144a0da
  handshakeStr :: GHC.Base.String -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 let {
                   s' :: [GHC.Types.Bool]
                   = SecretHandshake.$wgo
                       (GHC.List.reverse1
                          @ GHC.Types.Char
                          s
                          (GHC.Types.[] @ GHC.Types.Char))
                       5#
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Bool s' 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww2 5#) of wild {
                   GHC.Types.False
                   -> SecretHandshake.$fSecretHandshakeInt_go s' SecretHandshake.moves
                   GHC.Types.True
                   -> case s' of wild1 {
                        [] -> case GHC.List.badHead ret_ty [[GHC.Types.Char]] of {}
                        : x ds1
                        -> case x of wild2 {
                             GHC.Types.False
                             -> SecretHandshake.$fSecretHandshakeInt_go
                                  wild1
                                  SecretHandshake.moves
                             GHC.Types.True
                             -> GHC.List.reverse1
                                  @ [GHC.Types.Char]
                                  (SecretHandshake.$fSecretHandshakeInt_go
                                     wild1
                                     SecretHandshake.moves)
                                  (GHC.Types.[] @ [GHC.Types.Char]) } } } }) -}
b34f8e0e3e51d97ea5b6955563135446
  intToBase2 :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SecretHandshake.$wintToBase2 ww1 }) -}
f8bdbfae5fef32cd3bcf2758bf54a443
  moves :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   SecretHandshake.$fSecretHandshakeInt7
                   SecretHandshake.$fSecretHandshakeInt1) -}
instance [safe] SecretHandshake.SecretHandshake [GHC.Types.Int]
  = SecretHandshake.$fSecretHandshakeInt
instance [safe] SecretHandshake.SecretHandshake [[]]
  = SecretHandshake.$fSecretHandshake[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

