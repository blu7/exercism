
==================== FINAL INTERFACE ====================
2016-12-26 13:48:07.884871713 UTC

interface largest-series-product-0.0.0-IXd1gXPRX8Hm8sdL2AqVw:Series 8001
  interface hash: 85314fcc6573987b4257624cb7720c9e
  ABI hash: e884f9f14122b838b895802217659304
  export-list hash: a270e5bd00085e7debef847e8c26b85c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Series.largestProduct
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
0df42cb675c821bf91200606928276d7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Series.$trModule2
                   Series.$trModule1) -}
e201a4c9d916d73462396550a23ca2cc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Series"#) -}
12f884be202d904fa7be165b608bffd5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "largest-series-product-0.0.0-IXd1gXPRX8Hm8sdL2AqVw"#) -}
3be52e1ee01261f57f3e7bbb9dff7635
  $wgo :: [GHC.Types.Char] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f0b8333d1e8a33b9c2fadd5f60821ff3
  $wlargestProduct ::
    GHC.Prim.Int# -> GHC.Base.String -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww2) of wild {
                   GHC.Types.False
                   -> case (Series.largestProduct_go w)
                             `cast`
                           (Data.Monoid.N:All[0]) of wild1 {
                        GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Int
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># ww 0#) of wild2 {
                             GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Int
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ GHC.Types.Int
                                  (case GHC.Base.map
                                          @ [GHC.Types.Char]
                                          @ GHC.Types.Int
                                          Series.largestProduct1
                                          (Series.$wsplitConsecutiveSubstrings' ww w) of wild3 {
                                     [] -> GHC.List.maximum2
                                     : ipv ipv1
                                     -> case ipv of ww1 { GHC.Types.I# ww3 ->
                                        case GHC.List.$wgo ipv1 ww3 of ww4 { DEFAULT ->
                                        GHC.Types.I# ww4 } } }) } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int } }) -}
6931a41bdcb20f4d672b293d2af9b794
  $wsplitConsecutiveSubstrings' ::
    GHC.Prim.Int# -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
661ba62451e621b44a5efeaa092a9042
  largestProduct ::
    GHC.Types.Int -> GHC.Base.String -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Series.$wlargestProduct ww1 w1 }) -}
74f8768c7d48bc43fcf02015df5ce6ca
  largestProduct1 :: [GHC.Types.Char] -> GHC.Types.Int
  {- Arity: 1,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case Series.$wgo x of ww { DEFAULT -> GHC.Types.I# ww }) -}
fa10c6c0d6424bf48869b176b01b7618
  largestProduct_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

