
==================== FINAL INTERFACE ====================
2016-10-07 13:16:04.18929971 UTC

interface grains-0.0.0-9V2rQn0ubOW8kcuN3wbhIX:Grains 8001
  interface hash: 3d40651b8c14fc7b0a78f58eb3765f70
  ABI hash: 00e813186f6a1a50790d55509e7f92c5
  export-list hash: d853f02acc1fa8002e34dd4030547ffb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Grains.square
  Grains.total
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
18dbc89084516d780a35c7664635dcb1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Grains.$trModule2
                   Grains.$trModule1) -}
edd5ad4fda25455d29eae73d984fe631
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Grains"#) -}
841dbbbcf6e3138d0605848e91dcc270
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "grains-0.0.0-9V2rQn0ubOW8kcuN3wbhIX"#) -}
8de5524d1a4ce7b755c92b6468e5d014
  $wsquare ::
    GHC.Prim.Int# -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># ww 64#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ GHC.Integer.Type.Integer
                             (GHC.List.$w!!
                                @ GHC.Integer.Type.Integer
                                Grains.grains
                                (GHC.Prim.-# ww 1#))
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Integer.Type.Integer }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Integer.Type.Integer }) -}
d4d37c66710a1f233008946e77ddd842
  grains :: [GHC.Integer.Type.Integer]
  {- Unfolding: (Grains.square_go Grains.square1) -}
cda9577f0abd0308993c8879fb744da0
  square :: GHC.Types.Int -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Grains.$wsquare ww1 }) -}
c19e20964feaf807d85790338a603bfd
  square1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
e2103a8155c1439a0474d378080ba30b
  square_go :: GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,U> -}
6d04f83793f3b198bd5cb15ee74e3557
  total :: GHC.Integer.Type.Integer
  {- Unfolding: (Grains.total_go Grains.grains Grains.square1) -}
4bc079330194c4f008b60cbe8cc0c10b
  total_go ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

