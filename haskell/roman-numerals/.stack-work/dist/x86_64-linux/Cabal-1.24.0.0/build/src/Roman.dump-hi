
==================== FINAL INTERFACE ====================
2016-12-01 20:51:37.913974402 UTC

interface roman-numerals-0.0.0-2YiyhoBA0LIEMQkhGEZKS:Roman 8001
  interface hash: 4de016d9ab4d8330f90a92b4ff2ee3ac
  ABI hash: c01c5484fd016927ee6c2b7cee7893bf
  export-list hash: 57d09e4d199fc1725d1ab9dc04f5179d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Roman.numerals
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
74d29e5761b541ac0b7c4c36c56ab477
  $fShowRoman :: GHC.Show.Show Roman.Roman
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Roman.Roman
                  Roman.$fShowRoman_$cshowsPrec
                  Roman.$fShowRoman_$cshow
                  Roman.$fShowRoman_$cshowList -}
74d29e5761b541ac0b7c4c36c56ab477
  $fShowRoman1 :: Roman.Roman -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Roman.Roman) (w1 :: GHC.Base.String) ->
                 case w of ww { Roman.Roman ww1 ->
                 Roman.$w$cshowsPrec 0# ww1 w1 }) -}
6fc1d7a0981695aac917bfec14f38ced
  $fShowRoman2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Roman "#) -}
74d29e5761b541ac0b7c4c36c56ab477
  $fShowRoman_$cshow :: Roman.Roman -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (0, True, True) Roman.numerals -}
74d29e5761b541ac0b7c4c36c56ab477
  $fShowRoman_$cshowList :: [Roman.Roman] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Roman.Roman
                   Roman.$fShowRoman1) -}
74d29e5761b541ac0b7c4c36c56ab477
  $fShowRoman_$cshowsPrec ::
    GHC.Types.Int -> Roman.Roman -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Roman.Roman)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Roman.Roman ww3 ->
                 Roman.$w$cshowsPrec ww1 ww3 w2 } }) -}
87463f9a67e002d57da593eb26c1a8c9
  $tc'Roman :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7281209350566102727##
                   9915369281518886939##
                   Roman.$trModule
                   Roman.$tc'Roman1) -}
ca21aec21f450c333e205ff8b85e0c7a
  $tc'Roman1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Roman"#) -}
4ebcfc9664e8db42bde0435c1b9aca04
  $tcRoman :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15661668539074830888##
                   5484526803395945466##
                   Roman.$trModule
                   Roman.$trModule1) -}
33f8f97d5ae43cb9663fe53e49848e45
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Roman.$trModule2 Roman.$trModule1) -}
305dd20514f8f2dce62f2bb474c73bca
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Roman"#) -}
6a96972c9e2b8721a8a308507b49fde2
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "roman-numerals-0.0.0-2YiyhoBA0LIEMQkhGEZKS"#) -}
1c0f63b78d3bf9ea2d58a85c7ba125d8
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Roman.$fShowRoman2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Roman.$fShowRoman2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows8
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows8
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w))))) }) -}
1518356d9b2049efbf096aa13f52a38b
  $wnumerals :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Roman.$fShowRoman2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows8
                      (GHC.Show.showLitString ww Roman.numerals1))) -}
74d29e5761b541ac0b7c4c36c56ab477
  data Roman = Roman GHC.Base.String
74d29e5761b541ac0b7c4c36c56ab477
  numerals :: Roman.Roman -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Roman.Roman) ->
                 case w of ww { Roman.Roman ww1 -> Roman.$wnumerals ww1 }) -}
c7e9616a9cd56d8c35f0592fa69d473a
  numerals1 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
instance [safe] GHC.Show.Show [Roman.Roman] = Roman.$fShowRoman
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

