
==================== FINAL INTERFACE ====================
2016-10-09 14:29:58.86968113 UTC

interface rna-transcription-0.0.0-7k1wXbZC5WjL6mVThR1DCY:DNA 8001
  interface hash: cc936bdb8b8c7ec58d0ee900b0131ba9
  ABI hash: d3f657ee351071aa7a9dd8ae0798c3cc
  export-list hash: 2612cd48601cf77f578d312bb7c10540
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  DNA.toRNA
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
5f5d28f819638518e1a9ab96245e7e34
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module DNA.$trModule2 DNA.$trModule1) -}
6eb127bc4bc5990c36e41b58b6df795c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DNA"#) -}
62010677a6f743030a28d19e69a7200e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "rna-transcription-0.0.0-7k1wXbZC5WjL6mVThR1DCY"#) -}
2c9d850ae844e672260203d6d78ec06d
  toRNA :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ GHC.Base.String
                   : ipv ipv1
                   -> case (DNA.toRNA_go wild)
                             `cast`
                           (Data.Monoid.N:All[0]) of wild1 {
                        GHC.Types.False -> GHC.Base.Nothing @ GHC.Base.String
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ [GHC.Types.Char]
                             (GHC.Base.map
                                @ GHC.Types.Char
                                @ GHC.Types.Char
                                DNA.toRNA1
                                wild) } }) -}
ed8dba76bf8a945d81452de25dc32709
  toRNA1 :: GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 case ww1 of wild {
                   DEFAULT -> GHC.Types.C# wild
                   'A'# -> GHC.Types.C# 'U'#
                   'C'# -> GHC.Types.C# 'G'#
                   'G'# -> GHC.Types.C# 'C'#
                   'T'# -> GHC.Types.C# 'A'# } }) -}
a4f52e8f48b64a765c0a8dc080a28231
  toRNA_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

