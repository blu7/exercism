
==================== FINAL INTERFACE ====================
2017-01-09 02:27:17.03528283 UTC

interface pythagorean-triplet-0.0.0-JqYTVOp2txVLCsAijzcNb0:Triplet 8001
  interface hash: d149279d8cb9dd33a914bf2902121bfc
  ABI hash: 8a3fe638463aa90896fc292fb263a755
  export-list hash: 8e2a3896d98b6f16fbbd8bfa84362c33
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Triplet.isPythagorean
  Triplet.mkTriplet
  Triplet.pythagoreanTriplets
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
5b1c9d4ac9a5e11811d273eb3e96ae44
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Triplet.$trModule2
                   Triplet.$trModule1) -}
6bdb5b17658ce4d904df36785ccd3b52
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Triplet"#) -}
c8a78123384e48cc875aac79087e861b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pythagorean-triplet-0.0.0-JqYTVOp2txVLCsAijzcNb0"#) -}
126c67f507f501d61c013e190f883e6e
  $wisPythagorean ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 case Data.OldList.sortBy
                        @ GHC.Integer.Type.Integer
                        GHC.Integer.Type.compareInteger
                        (GHC.Types.:
                           @ GHC.Integer.Type.Integer
                           ww
                           (GHC.Types.:
                              @ GHC.Integer.Type.Integer
                              ww1
                              (GHC.Types.:
                                 @ GHC.Integer.Type.Integer
                                 ww2
                                 (GHC.Types.[] @ GHC.Integer.Type.Integer)))) of wild {
                   [] -> case Triplet.isPythagorean1 ret_ty GHC.Types.Bool of {}
                   : a ds
                   -> case ds of wild1 {
                        [] -> case Triplet.isPythagorean1 ret_ty GHC.Types.Bool of {}
                        : b ds1
                        -> case ds1 of wild2 {
                             [] -> case Triplet.isPythagorean1 ret_ty GHC.Types.Bool of {}
                             : c ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> case GHC.Integer.Type.eqInteger#
                                            (GHC.Integer.Type.plusInteger
                                               (GHC.Integer.Type.timesInteger a a)
                                               (GHC.Integer.Type.timesInteger b b))
                                            (GHC.Integer.Type.timesInteger
                                               c
                                               c) of wild4 { DEFAULT ->
                                     GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 }
                                  : ipv ipv1
                                  -> case Triplet.isPythagorean1
                                     ret_ty GHC.Types.Bool
                                     of {} } } } }) -}
617a6ca0c26a26521b7e7d4d6f1d7a03
  type Triplet =
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
791e5c251b5503ae67d92c52d6b5e245
  isPythagorean :: Triplet.Triplet -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Triplet.Triplet) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Triplet.$wisPythagorean ww1 ww2 ww3 }) -}
4cf5797fe3e935b323bce06ac821ebd0
  isPythagorean1 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
  {- Strictness: x -}
751c182f10656c277247fe3ea1829e58
  mkTriplet ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Triplet.Triplet
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                (GHC.Tuple.(,,)
                   @ GHC.Integer.Type.Integer
                   @ GHC.Integer.Type.Integer
                   @ GHC.Integer.Type.Integer) -}
a54e1fa11d97ff607bb469b5b71ad805
  pythagoreanTriplets ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> [Triplet.Triplet]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (i :: GHC.Integer.Type.Integer)
                   (j :: GHC.Integer.Type.Integer) ->
                 letrec {
                   go :: GHC.Integer.Type.Integer
                         -> [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                              GHC.Integer.Type.Integer)]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.gtInteger# x j of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> let {
                            n :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                                   GHC.Integer.Type.Integer)]
                            = go (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1)
                          } in
                          letrec {
                            go1 :: GHC.Integer.Type.Integer
                                   -> [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                                        GHC.Integer.Type.Integer)]
                              {- Arity: 1, Strictness: <S,U> -}
                            = \ (x1 :: GHC.Integer.Type.Integer) ->
                              case GHC.Integer.Type.gtInteger# x1 j of wild2 { DEFAULT ->
                              case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                                GHC.Types.False
                                -> let {
                                     n1 :: [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                                             GHC.Integer.Type.Integer)]
                                     = go1 (GHC.Integer.Type.plusInteger x1 GHC.Enum.$fEnumInteger1)
                                   } in
                                   letrec {
                                     go2 :: GHC.Integer.Type.Integer
                                            -> [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                                                 GHC.Integer.Type.Integer)]
                                       {- Arity: 1, Strictness: <S,U> -}
                                     = \ (x2 :: GHC.Integer.Type.Integer) ->
                                       case GHC.Integer.Type.gtInteger# x2 j of wild4 { DEFAULT ->
                                       case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                                         GHC.Types.False
                                         -> case Triplet.$wisPythagorean x x1 x2 of wild6 {
                                              GHC.Types.False
                                              -> go2
                                                   (GHC.Integer.Type.plusInteger
                                                      x2
                                                      GHC.Enum.$fEnumInteger1)
                                              GHC.Types.True
                                              -> case GHC.Integer.Type.geInteger#
                                                        x
                                                        i of wild7 { DEFAULT ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        wild7 of wild8 {
                                                   GHC.Types.False
                                                   -> go2
                                                        (GHC.Integer.Type.plusInteger
                                                           x2
                                                           GHC.Enum.$fEnumInteger1)
                                                   GHC.Types.True
                                                   -> GHC.Types.:
                                                        @ (GHC.Integer.Type.Integer,
                                                           GHC.Integer.Type.Integer,
                                                           GHC.Integer.Type.Integer)
                                                        (x, x1, x2)
                                                        (go2
                                                           (GHC.Integer.Type.plusInteger
                                                              x2
                                                              GHC.Enum.$fEnumInteger1)) } } }
                                         GHC.Types.True -> n1 } }
                                   } in
                                   go2 x1
                                GHC.Types.True -> n } }
                          } in
                          go1 x
                       GHC.Types.True
                       -> GHC.Types.[]
                            @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
                               GHC.Integer.Type.Integer) } }
                 } in
                 go Triplet.pythagoreanTriplets1) -}
473473c1fe1a0d70e52b833c0732e1ae
  pythagoreanTriplets1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

