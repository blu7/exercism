
==================== FINAL INTERFACE ====================
2016-10-09 19:21:58.33354019 UTC

interface nucleotide-count-0.0.0-LnIjeFZp0SF6K8oWePf1A:DNA 8001
  interface hash: 78bef5c4cdf69a2f6dcbdb8900d1121b
  ABI hash: 4c50b1cb90b376c960022a7e0cdffa38
  export-list hash: efdfbcc1f77a101c5bc13346bfaabf47
  orphan hash: 126d0bab1fabde653dee905dd409ea00
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  DNA.count
  DNA.nucleotideCounts
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
e0dfac5c5509a49d20e7372599e241b6
  $sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Char, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> DNA.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> DNA.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
121dfd5431c2514502ab342c67b48c07
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a0d6af9ffd13265c23d8aff74bf6c65b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module DNA.$trModule2 DNA.$trModule1) -}
296d9ff70864ee80e6ec1edf8e05d555
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DNA"#) -}
73646d82a8155943ce422a1498ead56b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "nucleotide-count-0.0.0-LnIjeFZp0SF6K8oWePf1A"#) -}
71350494f1ca24c4a8319add2c5ad09b
  $w$sgo10 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
116dec61c41f5a2c92fb0eca6a7bd06a
  $wcount ::
    GHC.Prim.Char#
    -> GHC.Base.String
    -> Data.Either.Either GHC.Base.String GHC.Types.Int
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) (w :: GHC.Base.String) ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> Data.Either.Either GHC.Base.String GHC.Types.Int
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                     case (DNA.count_go w) `cast` (Data.Monoid.N:All[0]) of wild {
                       GHC.Types.False -> DNA.count1
                       GHC.Types.True
                       -> Data.Either.Right
                            @ GHC.Base.String
                            @ GHC.Types.Int
                            (case DNA.$wcount' (GHC.Types.C# ww) w of ww1 { DEFAULT ->
                             GHC.Types.I# ww1 }) }
                 } in
                 case ww of wild {
                   DEFAULT -> DNA.count1
                   'A'# -> $j GHC.Prim.void#
                   'C'# -> $j GHC.Prim.void#
                   'G'# -> $j GHC.Prim.void#
                   'T'# -> $j GHC.Prim.void# }) -}
f4cdfec62798fce4bbe2823197231e5a
  $wcount' :: GHC.Types.Char -> GHC.Base.String -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char) (w1 :: GHC.Base.String) ->
                 letrec {
                   $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w2 :: [GHC.Types.Char]) (ww :: GHC.Prim.Int#) ->
                     case w2 of wild {
                       [] -> ww
                       : y ys
                       -> case y of wild1 { GHC.Types.C# x ->
                          case w of wild2 { GHC.Types.C# y1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.eqChar# x y1) of wild3 {
                            GHC.Types.False -> $wgo ys ww
                            GHC.Types.True -> $wgo ys (GHC.Prim.+# ww 1#) } } } }
                 } in
                 $wgo w1 0#) -}
aaf857ffddc3a2df44cd9e21cc089114
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
ef2876447392542cdb72a54bc4f213b9
  count ::
    GHC.Types.Char
    -> GHC.Base.String
    -> Data.Either.Either GHC.Base.String GHC.Types.Int
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Char) (w1 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.C# ww1 -> DNA.$wcount ww1 w1 }) -}
34604c94755b472d257ad3855b26be49
  count' :: GHC.Types.Char -> GHC.Base.String -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Char) (w1 :: GHC.Base.String) ->
                 case DNA.$wcount' w w1 of ww { DEFAULT -> GHC.Types.I# ww }) -}
03a764ecdf44ae49e2fb952bf1284cdf
  count1 :: Data.Either.Either [GHC.Types.Char] GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   DNA.count2) -}
83234e306536daa0cccc4b643ded1143
  count2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "No valid input."#) -}
ec82ce473020734ceb05c469ecabe051
  count_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5815795ddf782ad1c7a7a289ae8fd817
  nucleotideCounts ::
    GHC.Base.String
    -> Data.Either.Either
         GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case (DNA.nucleotideCounts_go s)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> DNA.nucleotideCounts1
                   GHC.Types.True
                   -> Data.Either.Right
                        @ GHC.Base.String
                        @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                        (DNA.$sfromList
                           @ GHC.Types.Int
                           (GHC.CString.unpackFoldrCString#
                              @ [(GHC.Types.Char, GHC.Types.Int)]
                              "ATCG"#
                              (\ (x :: GHC.Types.Char)
                                 (ys :: [(GHC.Types.Char, GHC.Types.Int)])[OneShot] ->
                               GHC.Types.:
                                 @ (GHC.Types.Char, GHC.Types.Int)
                                 (x, DNA.count' x s)
                                 ys)
                              (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int)))) }) -}
de6f866ce9d8541a9bd4d149ddd6a645
  nucleotideCounts1 ::
    Data.Either.Either
      [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ [GHC.Types.Char]
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   DNA.count2) -}
295f90e9a8f12bc2bc49659199404c4d
  nucleotideCounts_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
"SPEC/DNA fromList @ Char _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord GHC.Types.Char)
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = DNA.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

