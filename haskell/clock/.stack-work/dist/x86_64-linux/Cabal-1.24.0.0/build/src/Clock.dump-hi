
==================== FINAL INTERFACE ====================
2016-12-27 16:27:06.749905646 UTC

interface clock-0.0.0-C2hzRbvtHFmH8t82fVkGG2:Clock 8001
  interface hash: 4ab995215400f21a33b8b35187ac27ce
  ABI hash: 08b873ba8d102dfba57acce6668fcc59
  export-list hash: 90ec955a15ec770129c007179a6041ba
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Clock.clockHour
  Clock.clockMin
  Clock.fromHourMin
  Clock.toString
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Printf 981db3fab2db52a63576c71c790058bf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
8744b7dc937332868282858face76339
  $fEqClock :: GHC.Classes.Eq Clock.Clock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Clock.Clock Clock.$fEqClock_$c== Clock.$fEqClock_$c/= -}
8744b7dc937332868282858face76339
  $fEqClock_$c/= :: Clock.Clock -> Clock.Clock -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Clock.Clock) (y :: Clock.Clock) ->
                 GHC.Classes.not (Clock.$fEqClock_$c== x y)) -}
8744b7dc937332868282858face76339
  $fEqClock_$c== :: Clock.Clock -> Clock.Clock -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Clock.Clock) (w1 :: Clock.Clock) ->
                 case w of ww { Clock.Sec ww1 ->
                 case w1 of ww2 { Clock.Sec ww3 -> Clock.$w$c== ww1 ww3 } }) -}
8744b7dc937332868282858face76339
  $fMonoidClock :: GHC.Base.Monoid Clock.Clock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Clock.Clock
                  Clock.$fMonoidClock_$cmempty
                  Clock.$fMonoidClock_$cmappend
                  Clock.$fMonoidClock_$cmconcat -}
65c91ea528801d748fbd697ca1be00e9
  $fMonoidClock1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
8744b7dc937332868282858face76339
  $fMonoidClock_$c+ :: Clock.Clock -> Clock.Clock -> Clock.Clock
  {- Arity: 2, Strictness: <S,1*U(1*U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Clock.Clock) (ds1 :: Clock.Clock) ->
                 case ds of wild { Clock.Sec x ->
                 case ds1 of wild1 { Clock.Sec y ->
                 Clock.Sec (GHC.Integer.Type.plusInteger x y) } }) -}
8744b7dc937332868282858face76339
  $fMonoidClock_$cmappend ::
    Clock.Clock -> Clock.Clock -> Clock.Clock
  {- Arity: 2, Strictness: <S,1*U(1*U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True) Clock.$fMonoidClock_$c+ -}
8744b7dc937332868282858face76339
  $fMonoidClock_$cmconcat :: [Clock.Clock] -> Clock.Clock
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Clock.Clock]) ->
                 case Clock.$wgo w of ww { Unit# ww1 -> Clock.Sec ww1 }) -}
8744b7dc937332868282858face76339
  $fMonoidClock_$cmempty :: Clock.Clock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Clock.Sec Clock.$fMonoidClock1) -}
8744b7dc937332868282858face76339
  $fNumClock :: GHC.Num.Num Clock.Clock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Clock.Clock
                  Clock.$fMonoidClock_$c+
                  Clock.$fNumClock_$c-
                  Clock.$fNumClock_$c*
                  Clock.$fNumClock_$cnegate
                  Clock.$fNumClock_$cabs
                  Clock.$fNumClock_$csignum
                  Clock.$fNumClock_$cfromInteger -}
8744b7dc937332868282858face76339
  $fNumClock_$c* :: Clock.Clock -> Clock.Clock -> Clock.Clock
  {- Strictness: x -}
8744b7dc937332868282858face76339
  $fNumClock_$c- :: Clock.Clock -> Clock.Clock -> Clock.Clock
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Clock.Clock) (y :: Clock.Clock) ->
                 Clock.$fMonoidClock_$c+ x (Clock.$fNumClock_$cnegate y)) -}
8744b7dc937332868282858face76339
  $fNumClock_$cabs :: Clock.Clock -> Clock.Clock
  {- Strictness: x -}
8744b7dc937332868282858face76339
  $fNumClock_$cfromInteger :: GHC.Integer.Type.Integer -> Clock.Clock
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Clock.Sec (GHC.Integer.Type.timesInteger Clock.secsPerMinute x)) -}
8744b7dc937332868282858face76339
  $fNumClock_$cnegate :: Clock.Clock -> Clock.Clock
  {- Arity: 1, Strictness: <S,1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Clock.Clock) ->
                 case ds of wild { Clock.Sec x ->
                 Clock.Sec (GHC.Integer.Type.minusInteger Clock.secsPerDay x) }) -}
8744b7dc937332868282858face76339
  $fNumClock_$csignum :: Clock.Clock -> Clock.Clock
  {- Strictness: x -}
8744b7dc937332868282858face76339
  $fShowClock :: GHC.Show.Show Clock.Clock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Clock.Clock
                  Clock.$fShowClock_$cshowsPrec
                  Clock.toString
                  Clock.$fShowClock_$cshowList -}
8744b7dc937332868282858face76339
  $fShowClock1 :: Clock.Clock -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Clock.Clock) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Clock.toString x) s) -}
8744b7dc937332868282858face76339
  $fShowClock_$cshowList :: [Clock.Clock] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Clock.Clock]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Clock.Clock Clock.$fShowClock1 ls s) -}
8744b7dc937332868282858face76339
  $fShowClock_$cshowsPrec ::
    GHC.Types.Int -> Clock.Clock -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,U(U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Clock.Clock)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (Clock.toString x))
                   s) -}
1ad1ed5f8b659151e9c882764d8f44dc
  $tc'Sec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8858580024331481487##
                   219620034449401629##
                   Clock.$trModule
                   Clock.$tc'Sec1) -}
4caa9d0e16a7c398280384fbe562ddde
  $tc'Sec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sec"#) -}
12e1938f885d01383d5a95ba26909589
  $tcClock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2928480460030185111##
                   6841859362934353829##
                   Clock.$trModule
                   Clock.$trModule1) -}
82f355adc584c94a87e2b752800a9081
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Clock.$trModule2 Clock.$trModule1) -}
6406c90b3ae152fb5990eb91c510a380
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Clock"#) -}
00675b523cba91a82f318c03c973102c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "clock-0.0.0-C2hzRbvtHFmH8t82fVkGG2"#) -}
0057e48d7ed0eccab95c4e4f499d4ce1
  $w$c== ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        (GHC.Integer.Type.modInteger ww Clock.secsPerDay)
                        (GHC.Integer.Type.modInteger
                           ww1
                           Clock.secsPerDay) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
aec5a29e78592c9b7dcd6274cecb3962
  $wfromHourMin ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> (# GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 (# GHC.Integer.Type.plusInteger
                      (GHC.Integer.Type.modInteger
                         (GHC.Integer.Type.timesInteger Clock.secsPerMinute w1)
                         Clock.secsPerDay)
                      (GHC.Integer.Type.modInteger
                         (GHC.Integer.Type.timesInteger Clock.secsPerHour w)
                         Clock.secsPerDay) #)) -}
8744b7dc937332868282858face76339
  $wgo :: [Clock.Clock] -> (# GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
8744b7dc937332868282858face76339
  data Clock = Sec GHC.Integer.Type.Integer
8744b7dc937332868282858face76339
  clockHour :: Clock.Clock -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Clock.Clock) ->
                 case ds of wild { Clock.Sec s ->
                 GHC.Integer.Type.modInteger
                   (GHC.Integer.Type.divInteger s Clock.secsPerHour)
                   Clock.hoursPerDay }) -}
8744b7dc937332868282858face76339
  clockMin :: Clock.Clock -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Clock.Clock) ->
                 case ds of wild { Clock.Sec s ->
                 GHC.Integer.Type.modInteger
                   (GHC.Integer.Type.divInteger s Clock.secsPerMinute)
                   Clock.secsPerMinute }) -}
28972d790e28741b289c13ce4abb1c50
  fromHourMin ::
    GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> Clock.Clock
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case Clock.$wfromHourMin w w1 of ww { Unit# ww1 ->
                 Clock.Sec ww1 }) -}
181ad3e81c023104e17ff7454db676f3
  hoursPerDay :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (24) -}
9f671f77ba570700339f1865a921039e
  secsPerDay :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (86400) -}
9da0c4124e851405b1c314ba87b9ebd7
  secsPerHour :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3600) -}
266d9f8727a0f18901e2bee8e2cf7f5b
  secsPerMinute :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (60) -}
8744b7dc937332868282858face76339
  toString :: Clock.Clock -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (c :: Clock.Clock) ->
                 Clock.toString2
                   Clock.toString1
                   (GHC.Types.[] @ Text.Printf.UPrintf)
                   (Clock.clockHour c)
                   (Clock.clockMin c)) -}
c00cdb2e673e32ef5b7fa4814c995261
  toString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "%02d:%02d"#) -}
957cd6dd895b8f1581a82cb492392cb1
  toString2 ::
    GHC.Base.String
    -> [Text.Printf.UPrintf]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U>,
     Unfolding: (\ (fmts :: GHC.Base.String)
                   (args :: [Text.Printf.UPrintf])
                   (a1 :: GHC.Integer.Type.Integer)
                   (eta :: GHC.Integer.Type.Integer) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         (GHC.Types.:
                            @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                            (Text.Printf.$wparseIntFormat @ GHC.Integer.Type.Integer,
                             Text.Printf.formatInteger eta)
                            (GHC.Types.:
                               @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                               (Text.Printf.$wparseIntFormat @ GHC.Integer.Type.Integer,
                                Text.Printf.formatInteger a1)
                               args))
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
instance [safe] GHC.Classes.Eq [Clock.Clock] = Clock.$fEqClock
instance [safe] GHC.Base.Monoid [Clock.Clock] = Clock.$fMonoidClock
instance [safe] GHC.Num.Num [Clock.Clock] = Clock.$fNumClock
instance [safe] GHC.Show.Show [Clock.Clock] = Clock.$fShowClock
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

